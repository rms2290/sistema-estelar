#!/usr/bin/env python
"""
Script de agendamento para arquivamento autom√°tico
Executa arquivamento mensal de dados antigos
"""

import os
import sys
import django
import schedule
import time
from datetime import datetime
from pathlib import Path

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'sistema_estelar.settings')
django.setup()

def executar_arquivamento_mensal():
    """Executa arquivamento mensal de dados antigos"""
    print(f"\nüïê [{datetime.now().strftime('%d/%m/%Y %H:%M:%S')}] Iniciando arquivamento mensal...")
    
    try:
        # Executar comando de arquivamento com backup
        os.system('python manage.py arquivar_dados_antigos --backup --anos 5')
        print("‚úÖ Arquivamento mensal conclu√≠do com sucesso!")
        
        # Criar relat√≥rio de execu√ß√£o
        criar_relatorio_execucao()
        
    except Exception as e:
        print(f"‚ùå Erro no arquivamento mensal: {e}")

def executar_limpeza_trimestral():
    """Executa limpeza trimestral mais agressiva"""
    print(f"\nüïê [{datetime.now().strftime('%d/%m/%Y %H:%M:%S')}] Iniciando limpeza trimestral...")
    
    try:
        # Executar comando de arquivamento com backup (dados de 3+ anos)
        os.system('python manage.py arquivar_dados_antigos --backup --anos 3')
        print("‚úÖ Limpeza trimestral conclu√≠da com sucesso!")
        
        # Criar relat√≥rio de execu√ß√£o
        criar_relatorio_execucao()
        
    except Exception as e:
        print(f"‚ùå Erro na limpeza trimestral: {e}")

def executar_backup_diario():
    """Executa backup di√°rio dos dados ativos"""
    print(f"\nüïê [{datetime.now().strftime('%d/%m/%Y %H:%M:%S')}] Iniciando backup di√°rio...")
    
    try:
        # Executar apenas backup (sem arquivamento)
        os.system('python manage.py arquivar_dados_antigos --backup --dry-run')
        print("‚úÖ Backup di√°rio conclu√≠do com sucesso!")
        
    except Exception as e:
        print(f"‚ùå Erro no backup di√°rio: {e}")

def criar_relatorio_execucao():
    """Cria relat√≥rio de execu√ß√£o do arquivamento"""
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    relatorio_file = f'dados_arquivados/relatorios/relatorio_{timestamp}.txt'
    
    # Criar diret√≥rio se n√£o existir
    Path('dados_arquivados/relatorios').mkdir(parents=True, exist_ok=True)
    
    with open(relatorio_file, 'w', encoding='utf-8') as f:
        f.write(f"RELAT√ìRIO DE ARQUIVAMENTO - {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}\n")
        f.write("=" * 50 + "\n")
        f.write(f"Data/Hora: {datetime.now()}\n")
        f.write(f"Tipo: Arquivamento Autom√°tico\n")
        f.write(f"Status: Conclu√≠do\n")
        f.write("=" * 50 + "\n")
    
    print(f"üìÑ Relat√≥rio criado: {relatorio_file}")

def configurar_agendamento():
    """Configura o agendamento das tarefas"""
    print("üìÖ CONFIGURANDO AGENDAMENTO AUTOM√ÅTICO...")
    
    # Arquivamento mensal (primeiro dia do m√™s √†s 02:00)
    schedule.every().month.at("02:00").do(executar_arquivamento_mensal)
    print("   ‚úÖ Arquivamento mensal: 1¬∫ dia do m√™s √†s 02:00")
    
    # Limpeza trimestral (primeiro dia de cada trimestre √†s 03:00)
    schedule.every(3).months.at("03:00").do(executar_limpeza_trimestral)
    print("   ‚úÖ Limpeza trimestral: 1¬∫ dia do trimestre √†s 03:00")
    
    # Backup di√°rio (todos os dias √†s 01:00)
    schedule.every().day.at("01:00").do(executar_backup_diario)
    print("   ‚úÖ Backup di√°rio: Todos os dias √†s 01:00")
    
    print("\nüîÑ Monitorando agendamento...")
    print("   Pressione Ctrl+C para parar")

def executar_agendamento():
    """Executa o loop de agendamento"""
    configurar_agendamento()
    
    try:
        while True:
            schedule.run_pending()
            time.sleep(60)  # Verificar a cada minuto
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Agendamento interrompido pelo usu√°rio")

def executar_teste():
    """Executa teste do sistema de arquivamento"""
    print("üß™ EXECUTANDO TESTE DO SISTEMA DE ARQUIVAMENTO...")
    
    # Teste 1: Simular arquivamento
    print("\n1Ô∏è‚É£ Testando simula√ß√£o de arquivamento...")
    os.system('python manage.py arquivar_dados_antigos --dry-run --anos 5')
    
    # Teste 2: Listar arquivos dispon√≠veis
    print("\n2Ô∏è‚É£ Testando listagem de arquivos...")
    os.system('python manage.py consultar_arquivo --listar')
    
    # Teste 3: Consultar dados arquivados
    print("\n3Ô∏è‚É£ Testando consulta de dados...")
    os.system('python manage.py consultar_arquivo --tipo romaneios')
    
    print("\n‚úÖ Testes conclu√≠dos!")

if __name__ == '__main__':
    if len(sys.argv) > 1:
        comando = sys.argv[1]
        
        if comando == 'iniciar':
            executar_agendamento()
        elif comando == 'teste':
            executar_teste()
        elif comando == 'mensal':
            executar_arquivamento_mensal()
        elif comando == 'trimestral':
            executar_limpeza_trimestral()
        elif comando == 'backup':
            executar_backup_diario()
        else:
            print("Uso: python agendar_arquivamento.py [iniciar|teste|mensal|trimestral|backup]")
    else:
        print("SISTEMA DE ARQUIVAMENTO AUTOM√ÅTICO")
        print("=" * 40)
        print("Comandos dispon√≠veis:")
        print("  iniciar    - Inicia o agendamento autom√°tico")
        print("  teste      - Executa testes do sistema")
        print("  mensal     - Executa arquivamento mensal")
        print("  trimestral - Executa limpeza trimestral")
        print("  backup     - Executa backup di√°rio")
        print("\nExemplo: python agendar_arquivamento.py iniciar") 